# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'first_test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import * 
from PyQt5 import QtCore, QtGui
from PyQt5.QtGui import * 
from PyQt5.QtCore import * 
import sys

import re
import numpy as np
import copy
import matplotlib.pyplot as plt
# %matplotlib inline

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(627, 728)
        font = QtGui.QFont()
        font.setPointSize(12)
        Dialog.setFont(font)
        # Dialog.setStyleSheet("background-color: rgb(255,255,255,250);")
        self.widget = QtWidgets.QWidget(Dialog)
        self.widget.setGeometry(QtCore.QRect(30, 10, 571, 701))
        self.widget.setStyleSheet("\n"
        "background-color: rgb(231, 246, 246);\n"
        "alternate-background-color: rgb(240, 251, 255);\n"
        "border-radius:50px\n"
        "\n"
        "\n"
        "")
        self.widget.setObjectName("widget")
  
# Titre Fonction 
        self.fonction = QtWidgets.QLabel(self.widget)
        self.fonction.setGeometry(QtCore.QRect(180, 50, 161, 31))
        self.fonction.setStyleSheet("color: rgb(7, 62, 113);\n"
        "font: 14pt \"Javanese Text\";\n"
        "background-color: rgb(239, 244, 255);\n"
        "")

# Div_Fonction
       
        self.fonction.setObjectName("fonction")
        self.div_fonction = QtWidgets.QLabel(self.widget)
        self.div_fonction.setGeometry(QtCore.QRect(170, 40, 381, 281))
        self.div_fonction.setStyleSheet("\n"
        "border-radius:5px;\n"
        "background-color: rgb(239, 244, 255);")
                # creating a QGraphicsDropShadowEffect object
        shadow = QGraphicsDropShadowEffect()
        # setting blur radius
        shadow.setBlurRadius(0)
        # adding shadow to the label
        self.div_fonction.setGraphicsEffect(shadow)

        self.div_fonction.setText("")
        self.div_fonction.setObjectName("div_fonction")
       
# Edit Fonction   
        self.edit_fonction = QtWidgets.QTextEdit(self.widget)
        self.edit_fonction.setGeometry(QtCore.QRect(320, 100, 181, 31))
        self.edit_fonction.setStyleSheet("border-radius:3px;\n"
"background-color: rgb(238, 255, 255);")
        self.edit_fonction.setObjectName("edit_fonction")
       
# Titre contrainte
        self.contrainte = QtWidgets.QLabel(self.widget)
        self.contrainte.setGeometry(QtCore.QRect(180, 170, 111, 31))
        self.contrainte.setStyleSheet("color: rgb(7, 62, 113);\n"
        "font: 14pt \"Javanese Text\";\n"
        "background-color: rgb(239, 244, 255);\n"
        "")
        self.contrainte.setObjectName("contrainte")
   
# Edit  contrainte
        self.Edit_contrainte = QtWidgets.QTextEdit(self.widget)
        self.Edit_contrainte.setGeometry(QtCore.QRect(320, 170, 181, 31))
        self.Edit_contrainte.setStyleSheet("border-radius:3px;\n"
        "background-color: rgb(238, 255, 255);")
        self.Edit_contrainte.setObjectName("Edit_contrainte")
#       Button Add  

        self.btn_add = QtWidgets.QPushButton(self.widget)
        self.btn_add.setGeometry(QtCore.QRect(520, 170, 41, 31))
        self.btn_add.setStyleSheet("background-color: rgb(33, 168, 198);\n"
        "border-radius:100px;\n"
        "font: 8pt \"Javanese Text\";")
        self.btn_add.setObjectName("btn_add")

        # self.btn_add =QtWidgets.QPushButton(self.widget)
        # self.btn_add.setGeometry(QtCore.QRect(510, 170, 31, 31))
        # # loading image
        # self.btn_add.setStyleSheet("background-image : url(add.png);"
        # "background-color: rgb(33, 168, 198);"
        # "border-radius:100px;")
        # self.btn_add.setObjectName("btn_add")
        
#  Affichage contrainte       
        self.affichage_contrainte = QtWidgets.QTextEdit(self.widget)
        self.affichage_contrainte.setGeometry(QtCore.QRect(190, 220, 331, 91))
        self.affichage_contrainte.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "border-radius:5px;")
        self.affichage_contrainte.setText("")
        self.affichage_contrainte.setObjectName("affichage_contrainte")
        
        
# Button Enregistrer PDF
        self.btn_enre_pdf = QtWidgets.QPushButton(self.widget)
        self.btn_enre_pdf.setGeometry(QtCore.QRect(30, 280, 111, 31))
        self.btn_enre_pdf.setStyleSheet("background-color: rgb(33, 168, 198);\n"
        "border-radius:100px;\n"
        "font: 8pt \"Javanese Text\";\n"
        "\n"
        "")
        self.btn_enre_pdf.setObjectName("btn_enre_pdf")
        # Action btn_enre_pdf
        def msg():
                print("You have clicked")
        
        self.btn_enre_pdf.clicked.connect(msg)
# Button  Aper√ßu graphique     
        self.btn_graphe = QtWidgets.QPushButton(self.widget)
        self.btn_graphe.setGeometry(QtCore.QRect(30, 230, 111, 31))
        self.btn_graphe.setStyleSheet("background-color: rgb(33, 168, 198);\n"
        "font: 8pt \"Javanese Text\";\n"
        "border-radius:100px;\n"
        "\n"
        "")
        self.btn_graphe.setObjectName("btn_graphe")
# Button Valider       
        self.btn_valider = QtWidgets.QPushButton(self.widget)
        self.btn_valider.setGeometry(QtCore.QRect(30, 180, 111, 31))
        self.btn_valider.setStyleSheet("QPushButton""{""background-color: rgb(33, 168, 198);\n"
        "border-radius:60px;\n"
        "font: 8pt \"Javanese Text\";\n"
        "\n"
        "}")
        self.btn_valider.setObjectName("btn_valider")
        
# Affichage Tableau  
        
        self.affichage_tableau = QtWidgets.QTableWidget(self.widget)
        self.affichage_tableau.setGeometry(QtCore.QRect(30, 340, 511, 341))
        self.affichage_tableau.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "border-radius:10px;")
        self.affichage_tableau.setObjectName("affichage_tableau")
        self.affichage_tableau.setColumnCount(0)
        self.affichage_tableau.setRowCount(0)

        # ********************QTextEdit
        # self.affichage_tableau = QtWidgets.QTextEdit(self.widget)
        # self.affichage_tableau.setGeometry(QtCore.QRect(30, 340, 501, 351))
        # self.affichage_tableau.setStyleSheet("background-color: rgb(193, 228, 231);\n"
        # "border-radius:5px;")
        # self.affichage_tableau.setObjectName("affichage_tableau")
        # ************
#         self.affichage_table = QtWidgets.QLabel(self.widget)
#         self.affichage_table.setGeometry(QtCore.QRect(30, 340, 511, 341))
#         self.affichage_table.setStyleSheet("background-color: rgb(255, 255, 255);\n"
# "border-radius:5px;")
#         self.affichage_table.setText("")
#         self.affichage_table.setObjectName("affichage_table")
       
# # ScrollBar     
#         self.verticalScrollBar = QtWidgets.QScrollBar(self.widget)
#         self.verticalScrollBar.setGeometry(QtCore.QRect(510, 350, 16, 311))
#         self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
#         self.verticalScrollBar.setObjectName("verticalScrollBar")
     
# Titre     
        self.titre = QtWidgets.QLabel(self.widget)
        self.titre.setGeometry(QtCore.QRect(240, 0, 91, 31))
        self.titre.setStyleSheet("font: 28pt \"Niagara Engraved\";\n"
        "\n"
        "color: rgb(27, 58, 144);\n"
        "text-decoration: underline;\n"
        "")
        self.titre.setObjectName("titre")
       
# Div type 
        self.verticalFrame = QtWidgets.QFrame(self.widget)
        self.verticalFrame.setGeometry(QtCore.QRect(210, 80, 101, 71))
        self.verticalFrame.setObjectName("verticalFrame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalFrame)
        self.verticalLayout.setObjectName("verticalLayout")

      
# RadioBox Min       
        self.min = QtWidgets.QRadioButton(self.verticalFrame)
        self.min.setStyleSheet("background-color: rgb(239, 244, 255);\n"
        "font: 10pt \"Javanese Text\";\n" "color: rgb(0, 0, 70);"
        "QRadioButton::checked"
        "{"
        "background-color : red;"
        "};")
        self.min.setObjectName("min")
        self.verticalLayout.addWidget(self.min)
        
# RadioBox Max       
        self.max = QtWidgets.QRadioButton(self.verticalFrame)
        self.max.setStyleSheet("background-color: rgb(239, 244, 255);\n"
        "font: 10pt \"Javanese Text\";\n"
        "color: rgb(0, 0, 70);")
        self.max.setObjectName("max")


#  Div type      
        self.verticalLayout.addWidget(self.max)
        self.verticalWidget = QtWidgets.QWidget(self.widget)
        self.verticalWidget.setGeometry(QtCore.QRect(30, 60, 141, 101))
        self.verticalWidget.setObjectName("verticalWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
       
#    RadioBox pivot automatique   
        self.pivot_auto = QtWidgets.QRadioButton(self.verticalWidget)
        self.pivot_auto.setStyleSheet("background-color: rgb(231, 246, 246);\n"
        "font: 10pt \"Javanese Text\";\n"
        "color: rgb(0, 0, 70);")
        self.pivot_auto.setObjectName("pivot_auto")
        self.verticalLayout_2.addWidget(self.pivot_auto)

#    RadioBox pivot Manuel       
        self.pivot_manuel = QtWidgets.QRadioButton(self.verticalWidget)
        self.pivot_manuel.setStyleSheet("background-color: rgb(231, 246, 246);\n"
        "font: 10pt \"Javanese Text\";\n"
        "color: rgb(0, 0, 70);")
        self.pivot_manuel.setObjectName("pivot_manuel")
        self.verticalLayout_2.addWidget(self.pivot_manuel)
        
#    CheckBox     
        self.charger = QtWidgets.QCheckBox(self.verticalWidget)
        self.charger.setStyleSheet("background-color: rgb(231, 246, 246);\n"
        "font: 10pt \"Javanese Text\";\n"
        "color: rgb(0, 0, 70);")
        self.charger.setObjectName("charger")
        self.verticalLayout_2.addWidget(self.charger)


        self.div_fonction.raise_()
        self.fonction.raise_()
        self.edit_fonction.raise_()
        self.contrainte.raise_()
        self.Edit_contrainte.raise_()
        self.btn_add.raise_()
        self.affichage_contrainte.raise_()
        self.btn_enre_pdf.raise_()
        self.btn_graphe.raise_()
        self.btn_valider.raise_()
        self.affichage_tableau.raise_()
        # self.verticalScrollBar.raise_()
        self.titre.raise_()
        self.verticalFrame.raise_()
        self.verticalWidget.raise_()

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Simplxe"))
        self.fonction.setText(_translate("Dialog", "Fonction Objective"))
        self.contrainte.setText(_translate("Dialog", "Contraintes:"))
        self.btn_enre_pdf.setText(_translate("Dialog", "Enregistrer PDF"))
        self.btn_graphe.setText(_translate("Dialog", "Aper√ßu Graphique"))
        self.btn_valider.setText(_translate("Dialog", "Valider"))
        self.titre.setText(_translate("Dialog", "Simplexe"))
        self.min.setText(_translate("Dialog", "Min"))
        self.max.setText(_translate("Dialog", "Max"))
        self.pivot_auto.setText(_translate("Dialog", "Pivot Automatique"))
        self.pivot_manuel.setText(_translate("Dialog", "Pivot Manuel"))
        self.charger.setText(_translate("Dialog", "Charger Tout"))
        self.btn_add.setText(_translate("Dialog", "Ajouter"))
# import res_rc

# Fonction sur les radions buttons 
        self.reponse=""
        def onClickedType():               
          if self.max.isChecked():
               self.reponse="max"    
          if self.min.isChecked():
               self.reponse="min"   
          print("Reponse:"+self.reponse)
          return self.reponse

                   
        self.max.clicked.connect(onClickedType)
        self.min.clicked.connect(onClickedType)

# Fonction sur les pivots buttons
        def onClickedPivot():
                if self.pivot_auto.isChecked():
                        pivot="auto"
                if self.pivot_manuel.isChecked():
                        pivot="manuel"
                print("Pivot:"+pivot)
                return pivot
        
        self.pivot_auto.clicked.connect(onClickedPivot)
        self.pivot_manuel.clicked.connect(onClickedPivot)
        

# Fonction sur edit_contrainte et affichage_contraintes
        self.texte_contraintes=""
        self.list_contraintes=[]
        def onClickedAdd():
                self.texte=self.Edit_contrainte.toPlainText()
                self.Edit_contrainte.clear()
                if self.texte=='' or self.texte==' ': 
                        pass
                else:    
                        self.texte_contraintes=" \n".join([self.texte_contraintes,self.texte])
                self.affichage_contrainte.clear()
                self.affichage_contrainte.setText(self.texte_contraintes)
                return self.texte_contraintes
          
 
# # Fonction sur button valider
#         def onClickedValider():
#                 self.texte_contraintes=onClickedAdd()
                
#                 if self.edit_fonction.toPlainText()!=" " or self.edit_fonction.toPlainText()!="":
#                   self.string="\n".join([self.edit_fonction.toPlainText(), self.texte_contraintes]) 
#                 else:
#                         self.string=self.texte_contraintes
#                 self.affichage_tableau.setText(self.string)
#                 self_fonct_obj=self.edit_fonction.toPlainText()
#                 self.list_contraintes= self.texte_contraintes.split("\n")
#                 self.list_contraintes.pop(0)
#                 self.list_contraintes.pop()
#                 print("Fonction Objective:"+self_fonct_obj)
#                 print("Contraintes:"+str(self.list_contraintes))

#                 reponse_min_max=onClickedType() 
#                 f_obj=self.edit_fonction.toPlainText()

#                 print(Traitement(reponse_min_max,f_obj,self.liste_contraintes))
#                 return self.list_contraintes

#         # self.list_contraintes= onClickedValider()       

        
        self.btn_add.clicked.connect(onClickedAdd)
#         self.btn_valider.clicked.connect(onClickedValider)
# Fonction extraction input    
        #reponse_min_max prend le resultat de du radioBox
        #f_obj prend ce qui est dans QeditText  i.e  '3x1+2x2'
        #liste_contraintes prend la liste des contraintes i.e  ['5x1+3x2<=30','2x1+3x2<=24',...]

                        
        

        def Traitement(reponse_min_max,f_obj,liste_contraintes):
                b=[]
                liste2=[]
                liste_pour_les_ecarts = dict()
                liste_inf_super=[]
                               
                c=reponse_min_max                
                #======================================================================
                #Traitement sur la fonction obj : extraction des couts
                fct_obj= re.split(r'[+]', f_obj)
                lis_fct_obj=list()
                for i in range(len(fct_obj)):
                        if fct_obj[i]=='':
                         continue
                        if fct_obj[i][0]=='-':
                         a=int(fct_obj[i][:fct_obj[i].index('x')])
                        else:
                                a = int(fct_obj[i][:fct_obj[i].index('x')])
                                lis_fct_obj.append(a)
                        
                #Traitement sur les contraintes  : extraction des coeffs
                
                s=0
                for contr in liste_contraintes:
                        if '=' in contr:
                                liste_pour_les_ecarts[s]=2
                        if '>=' in contr:
                                liste_pour_les_ecarts[s]=True
                                liste_inf_super.append('>')
                        if '<=' in contr:
                                liste_pour_les_ecarts[s]=False
                                liste_inf_super.append('<')

                        result = re.split(r'[<>+=]|>=|<=', contr)
                        b.append(int(result[-1]))
                        result1=result.pop(-1)
                        l=list()
                        for i in range(len(result)):
                                if result[i]=='':
                                        continue
                                if result[i][0]=='-':
                                        a=int(result[i][:result[i].index('x')])
                                else:
                                        a = int(result[i][:result[i].index('x')])
                                l.append(a)
                        liste2.append(l)
                        s=s+1
                        
                A=copy.deepcopy(liste2)
                v=np.array(A)
                trans=v.T
                p=trans.shape[1]
                for su in range(p):
                        if trans[1,su]<0:
                                if liste_inf_super[su]=='<':
                                        liste_inf_super[su]='>'
                        else:
                                liste_inf_super[su]='<'
                #=================================================================                
                taille_contra=len(liste2[0])
                liste_indice_ajout_zerneg=[]
                liste_indice_ajout_a_egal=[]
                lis_pour_e=[]
                autre_lis_pour_entree=[]
                n=len(liste2)
                nbr_var_hors_base=len(liste2[0])
                zer=np.eye(n, dtype=int)

                for k,v in liste_pour_les_ecarts.items():
                        if v == False:
                                liste2[k].extend(zer[k])
                                lis_pour_e.append(('e',k+1))
                                autre_lis_pour_entree.append(('e',k+1))
                        elif v == True:
                                liste2[k].extend(-zer[k])
                                liste_indice_ajout_zerneg.append(k)
                                lis_pour_e.append(('a',k+1))
                                autre_lis_pour_entree.append(('e',k+1))

                        elif v == 2:
                                liste2[k].extend(zer[k])
                                liste_indice_ajout_a_egal.append(k)
                                lis_pour_e.append(('a',k+1))
                                autre_lis_pour_entree.append(('a',k+1))

                l=len(liste_indice_ajout_zerneg)
                h=len(liste_indice_ajout_a_egal)



                #zero=[[1,0,0],[0,1,0],[0,0,1]]
                nbr_e=len(liste2[0])-nbr_var_hors_base-h

                if l != 0:
                        #mi = iter(liste_indice_ajout_zerneg)
                        for k in liste_indice_ajout_zerneg:
                         autre_lis_pour_entree.append(('a',k+1))
                        for j in range(n):
                                liste2[j].append(zer[j][k])

                z=np.zeros(len(liste2[0])-len(lis_fct_obj),dtype=int)
                lis_fct_obj.extend(z) 
                nbr_var_a=l+h

                liste_indice_ajout_a_egal.extend(liste_indice_ajout_zerneg)
                if c=='min':
                        lis_fct_obj=-np.array(lis_fct_obj)

                var_base = [s[0]+str(s[1]) for s in lis_pour_e] 
                var_base.append('z')
                tem=[f[0]+str(f[1]) for f in autre_lis_pour_entree]
                variable=["x"+str(j+1) for j in range(nbr_var_hors_base)] 

                variable.extend(tem)
                variable.extend(['b','ratio']) 

                        

                return np.array(liste2),np.array(b),lis_fct_obj,n,variable,var_base,liste_inf_super,reponse_min_max



         
# Fonction sur button valider
        self.liste=[]
        def onClickedValider():
                self.texte_contraintes=onClickedAdd()
                self.list_contraintes= self.texte_contraintes.split("\n")
                
                for aj in self.list_contraintes:
                        if aj=='' or aj==' ':
                                continue
                        else:
                                self.liste.append(aj) 
                print("Liste corrig√©e:"+str(self.liste))

                self.texte_contraintes="\n".join(self.liste)
                self.string="\n".join([self.edit_fonction.toPlainText(), self.texte_contraintes]) 

                # self.affichage_tableau.setText(self.string)
                self_fonct_obj=self.edit_fonction.toPlainText()
                
                print("Fonction Objective:"+self_fonct_obj)
                print("Contraintes:"+str(self.liste))

                reponse_min_max=onClickedType() 
                f_obj=self.edit_fonction.toPlainText()
                liste_contraintes=self.liste
                print(Traitement(reponse_min_max,f_obj,liste_contraintes))
                return self.list_contraintes

        # self.list_contraintes= onClickedValider()       

        
        self.btn_add.clicked.connect(onClickedAdd)
        self.btn_valider.clicked.connect(onClickedValider)











        # reponse_min_max=onClickedType() 
        # self_fonct_obj=self.edit_fonction.toPlainText()
        # print(Traitement(reponse_min_max,f_obj,liste_contraintes))
        # A,b,c,nbr_contra,variable,var_base,lis_inf,max_ou_min=Traitement(reponse_min_max,self_fonct_obj,self.list_contraintes)
        # print(A)
        # print(b)
        # print(c)
        # print(nbr_contra)
        # print(variable)
        # print(var_base)
        # print(lis_inf)
        # print(max_ou_min)
        # print(Traitement(reponse,self_fonct_obj,self.list_contraintes)) 

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
